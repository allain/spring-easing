
import { describe, expect, it } from 'vitest';
import { interpolateColor } from "./utils/color-interpolate";
import { SpringEasing, SpringFrame, SpringOutFrame, SpringInOutFrame, SpringOutInFrame } from "../src/index";

describe("SpringFrame", () => {
  it('With 2 simple values [0, 25]', () => {
    expect(SpringEasing([0, 25]))
      .toEqual([
        [
          0, 0.373, 1.329, 2.753, 4.535, 6.574, 8.776,
          11.059, 13.352, 15.592, 17.73, 19.726, 21.549, 23.181,
          24.606, 25.821, 26.827, 27.629, 28.238, 28.669, 28.937,
          29.062, 29.061, 28.955, 28.763, 28.502, 28.19, 27.844,
          27.478, 27.103, 26.732, 26.374, 26.035, 25.722, 25.438,
          25.187, 24.97, 24.788, 24.639, 24.523, 24.437, 24.379,
          24.346, 24.335, 24.344, 24.368, 24.405, 24.451, 24.505,
          24.563, 24.624, 24.685, 24.744, 24.801, 24.855, 24.904,
          24.948, 24.986, 25.019, 25.046, 25.068, 25.085, 25.097,
          25.104, 25.108, 25.108, 25.106, 25.101, 25.094, 25.086,
          25.077, 25.067, 25.057, 25.047, 25.037, 25.028, 25.02,
          25.012, 25.006, 25, 24.995, 24.991, 24.988, 24.985,
          24.984, 24.983, 24.982, 24.983, 24.983, 24.984, 24.985,
          24.987, 24.988, 24.99, 24.991, 24.993, 24.995, 24.996,
          24.997, 25
        ],
        1666.6666666666663
      ]);

  })

  it('Easing using Array Frame Format (only the frame function is specified) [SpringOutFrame]', () => {
    let [frames, duration] = SpringEasing([0, 25], [SpringOutFrame]);
    expect([frames, duration])
      .toEqual([
        [
          0, 0.003, 0.004, 0.005, 0.007, 0.009, 0.01, 0.012,
          0.013, 0.015, 0.016, 0.017, 0.017, 0.018, 0.017, 0.016,
          0.015, 0.012, 0.009, 0.005, 0, -0.006, -0.012, -0.02,
          -0.028, -0.037, -0.047, -0.057, -0.067, -0.077, -0.086, -0.094,
          -0.101, -0.106, -0.108, -0.108, -0.104, -0.097, -0.085, -0.068,
          -0.046, -0.019, 0.014, 0.052, 0.096, 0.145, 0.199, 0.256,
          0.315, 0.376, 0.437, 0.495, 0.549, 0.595, 0.632, 0.656,
          0.665, 0.654, 0.621, 0.563, 0.477, 0.361, 0.212, 0.03,
          -0.187, -0.438, -0.722, -1.035, -1.374, -1.732, -2.103, -2.478,
          -2.844, -3.19, -3.502, -3.763, -3.955, -4.061, -4.062, -3.937,
          -3.669, -3.238, -2.629, -1.827, -0.821, 0.394, 1.819, 3.451,
          5.274, 7.27, 9.408, 11.648, 13.941, 16.224, 18.426, 20.465,
          22.247, 23.671, 24.627, 25
        ],
        1666.6666666666663
      ]);
  })

  // Even though I'd prefer if people didn't only set some of the spring parameters
  // I predict people will, so, `spring-easing` will warn about doing things like this
  it('Easing using string format (partially filled spring parameters) `spring-out(1, 100)`', () => {
    let [frames, duration] = SpringEasing([0, 25], `spring-out(1, 100)`);
    expect([frames, duration])
      .toEqual([
        [
          0, 0.003, 0.004, 0.005, 0.007, 0.009, 0.01, 0.012,
          0.013, 0.015, 0.016, 0.017, 0.017, 0.018, 0.017, 0.016,
          0.015, 0.012, 0.009, 0.005, 0, -0.006, -0.012, -0.02,
          -0.028, -0.037, -0.047, -0.057, -0.067, -0.077, -0.086, -0.094,
          -0.101, -0.106, -0.108, -0.108, -0.104, -0.097, -0.085, -0.068,
          -0.046, -0.019, 0.014, 0.052, 0.096, 0.145, 0.199, 0.256,
          0.315, 0.376, 0.437, 0.495, 0.549, 0.595, 0.632, 0.656,
          0.665, 0.654, 0.621, 0.563, 0.477, 0.361, 0.212, 0.03,
          -0.187, -0.438, -0.722, -1.035, -1.374, -1.732, -2.103, -2.478,
          -2.844, -3.19, -3.502, -3.763, -3.955, -4.061, -4.062, -3.937,
          -3.669, -3.238, -2.629, -1.827, -0.821, 0.394, 1.819, 3.451,
          5.274, 7.27, 9.408, 11.648, 13.941, 16.224, 18.426, 20.465,
          22.247, 23.671, 24.627, 25
        ],
        1666.6666666666663
      ]);
  })

  // Even though I'd prefer if people didn't only set some of the spring parameters
  // I predict people will, so, `spring-easing` will warn about doing things like this
  it('Easing using string format (completely filled spring parameters) `spring-out(1, 100, 10, 0)`', () => {
    let [frames, duration] = SpringEasing([0, 25], `spring-out(1, 100, 10, 0)`);
    expect([frames, duration])
      .toEqual([
        [
          0, 0.003, 0.004, 0.005, 0.007, 0.009, 0.01, 0.012,
          0.013, 0.015, 0.016, 0.017, 0.017, 0.018, 0.017, 0.016,
          0.015, 0.012, 0.009, 0.005, 0, -0.006, -0.012, -0.02,
          -0.028, -0.037, -0.047, -0.057, -0.067, -0.077, -0.086, -0.094,
          -0.101, -0.106, -0.108, -0.108, -0.104, -0.097, -0.085, -0.068,
          -0.046, -0.019, 0.014, 0.052, 0.096, 0.145, 0.199, 0.256,
          0.315, 0.376, 0.437, 0.495, 0.549, 0.595, 0.632, 0.656,
          0.665, 0.654, 0.621, 0.563, 0.477, 0.361, 0.212, 0.03,
          -0.187, -0.438, -0.722, -1.035, -1.374, -1.732, -2.103, -2.478,
          -2.844, -3.19, -3.502, -3.763, -3.955, -4.061, -4.062, -3.937,
          -3.669, -3.238, -2.629, -1.827, -0.821, 0.394, 1.819, 3.451,
          5.274, 7.27, 9.408, 11.648, 13.941, 16.224, 18.426, 20.465,
          22.247, 23.671, 24.627, 25
        ],
        1666.6666666666663
      ]);
  })

  it('Easing using Array Frame format (partially & completely filled spring parameters)', () => {
    let solution = [
      [
        0, 0.665, 2.268, 4.388, 6.676, 8.865, 10.775,
        12.303, 13.413, 14.119, 14.469, 14.531, 14.381, 14.095,
        13.739, 13.366, 13.018, 12.719, 12.485, 12.32, 12.218,
        12.173, 12.172, 12.202, 12.252, 12.312, 12.372, 12.427,
        12.474, 12.509, 12.534, 12.548, 12.554, 12.553, 12.547,
        12.538, 12.528, 12.519, 12.51, 12.503, 12.497, 12.494,
        12.492, 12.491, 12.492, 12.493, 12.494, 12.496, 12.497,
        12.499, 12.501, 12.503, 12.504, 12.506, 12.507, 12.508,
        12.509, 12.508, 12.506, 12.503, 12.497, 12.49, 12.481,
        12.472, 12.462, 12.453, 12.447, 12.446, 12.452, 12.466,
        12.491, 12.526, 12.573, 12.628, 12.688, 12.748, 12.798,
        12.828, 12.827, 12.782, 12.68, 12.515, 12.281, 11.982,
        11.634, 11.261, 10.905, 10.619, 10.469, 10.531, 10.881,
        11.587, 12.697, 14.225, 16.135, 18.324, 20.612, 22.732,
        24.335, 25
      ],
      1666.6666666666663
    ];

    // Partial
    let partial = SpringEasing([0, 25], [SpringInOutFrame, 1, 100]);
    expect(partial)
      .toEqual(solution);

    // Complete
    let complete = SpringEasing([0, 25], [SpringInOutFrame, 1, 100, 10, 0]);
    expect(complete)
      .toEqual(solution);
  })

  it('Easing using both formats (maximums & minimums spring parameters)', () => {
    let solutionMin = [
      [
        0, 0.662, 1.865, 3.415, 5.143, 6.908, 8.598,
        10.131, 11.454, 12.537, 13.371, 13.965, 14.338, 14.519,
        14.541, 14.438, 14.246, 13.996, 13.715, 13.427, 13.15,
        12.899, 12.681, 12.502, 12.364, 12.265, 12.203, 12.172,
        12.167, 12.183, 12.213, 12.254, 12.299, 12.346, 12.392,
        12.433, 12.469, 12.498, 12.521, 12.538, 12.548, 12.553,
        12.554, 12.552, 12.547, 12.541, 12.533, 12.525, 12.518,
        12.511, 12.489, 12.482, 12.475, 12.467, 12.459, 12.453,
        12.448, 12.446, 12.447, 12.452, 12.462, 12.479, 12.502,
        12.531, 12.567, 12.608, 12.654, 12.701, 12.746, 12.787,
        12.817, 12.833, 12.828, 12.797, 12.735, 12.636, 12.498,
        12.319, 12.101, 11.85, 11.573, 11.285, 11.004, 10.754,
        10.562, 10.459, 10.481, 10.662, 11.035, 11.629, 12.463,
        13.546, 14.869, 16.402, 18.092, 19.857, 21.585, 23.135,
        24.338, 25
      ],
      12777.777777777776
    ];

    let solutionMax = [
      [
        0, 3198.887, 5319.725, 6478.089, 6834.167, 6568.751,
        5863.864, 4888.328, 3788.095, 2680.878, 1654.351, 767.159,
        51.905, -480.607, -836.554, -1034.197, -1099.331, -1061.328,
        -949.924, -792.826, -614.086, -433.187, -264.717, -118.512,
        -0.126, 88.486, 148.188, 181.859, 193.651, 188.332,
        170.759, 145.479, 116.453, 86.906, 59.264, 35.177,
        15.587, 0.847, -9.16, -14.888, -17.005, -16.283,
        -13.517, -9.452, -4.741, 0.084, 4.618, 8.585,
        11.826, 14.277, 10.723, 13.174, 16.415, 20.382,
        24.916, 29.741, 34.452, 38.517, 41.283, 42.005,
        39.888, 34.16, 24.153, 9.413, -10.177, -34.264,
        -61.906, -91.453, -120.479, -145.759, -163.332, -168.651,
        -156.859, -123.188, -63.486, 25.126, 143.512, 289.717,
        458.187, 639.086, 817.826, 974.924, 1086.328, 1124.331,
        1059.197, 861.554, 505.607, -26.905, -742.159, -1629.351,
        -2655.878, -3763.095, -4863.328, -5838.864, -6543.751, -6809.167,
        -6453.089, -5294.725, -3173.887, 25
      ],
      14888.888888888947
    ];

    // Minimums for Spring Parameter
    let minimum = SpringEasing([0, 25], [SpringInOutFrame, -5000, -5000, -5000, -5000]);
    expect(minimum)
      .toEqual(solutionMin);

    // Maximums for Spring Parameter
    let maximum = SpringEasing([0, 25], [SpringInOutFrame, 5000, 5000, 5000, 5000]);
    expect(maximum)
      .toEqual(solutionMax);

    // Minimums for Spring Parameter (string format)
    let minimumStr = SpringEasing([0, 25], `spring-in-out(-5000, -5000, -5000, -5000)`);
    expect(minimumStr)
      .toEqual(solutionMin);

    // Maximums for Spring Parameter (string format)
    let maximumStr = SpringEasing([0, 25], `spring-in-out(5000, 5000, 5000, 5000)`);
    expect(maximumStr)
      .toEqual(solutionMax);
  })

  it('Other easing options', () => {
    let solutionMin = [[0, 0.0784909, 0.1848155, 0.3173124, 0.4743364, 0.6542616, 0.8554847, 1.0764279, 1.3155422, 1.571309, 1.8422431, 2.1268948, 2.4238517, 2.7317402, 3.0492276, 3.3750231, 3.7078792, 4.0465924, 4.3900045, 4.7370031, 5.0865222, 5.4375424, 5.7890915, 6.1402444, 6.4901234, 6.8378976, 7.1827831, 7.5240426, 7.8609846, 8.1929635, 8.5193785, 8.8396728, 9.1533333, 9.4598895, 9.7589123, 10.0500136, 10.3328445, 10.6070951, 10.8724927, 11.1288008, 11.375818, 11.6133768, 11.841342, 12.05961, 12.2681068, 12.4667873, 12.6556338, 12.8346544, 13.0038821, 13.1633732, 13.3132061, 13.45348, 13.5843134, 13.7058434, 13.8182236, 13.9216237, 14.0162275, 14.1022325, 14.1798481, 14.2492947, 14.3108026, 14.3646109, 14.4109666, 14.450123, 14.4823396, 14.5078805, 14.5270137, 14.5400101, 14.547143, 14.5486867, 14.5449165, 14.5361072, 14.5225329, 14.5044662, 14.4821776, 14.4559349, 14.4260024, 14.392641, 14.3561071, 14.3166524, 14.2745237, 14.2299622, 14.1832031, 14.1344758, 14.0840031, 14.032001, 13.978679, 13.9242392, 13.8688766, 13.8127787, 13.7561257, 13.6990901, 13.6418368, 13.584523, 13.5272983, 13.4703044, 13.4136756, 13.3575384, 13.3020117, 13.247207, 13.1932283, 13.1401724, 13.0881289, 13.0371802, 12.9874019, 12.9388629, 12.8916253, 12.8457449, 12.8012712, 12.7582477, 12.716712, 12.676696, 12.6382261, 12.6013234, 12.566004, 12.5322792, 12.5001556, 12.4696353, 12.4407164, 12.4133927, 12.3876546, 12.3634886, 12.340878, 12.3198029, 12.3002407, 12.2821657, 12.26555, 12.2503631, 12.2365725, 12.2241437, 12.2130407, 12.2032254, 12.1946588, 12.1873005, 12.1811088, 12.1760414, 12.1720551, 12.1691061, 12.1671502, 12.1661427, 12.166039, 12.1667942, 12.1683634, 12.170702, 12.1737656, 12.1775102, 12.1818922, 12.1868686, 12.192397, 12.1984357, 12.2049438, 12.2118812, 12.2192088, 12.2268883, 12.2348826, 12.2431554, 12.2516718, 12.2603978, 12.2693007, 12.2783488, 12.2875118, 12.2967605, 12.3060669, 12.3154046, 12.3247479, 12.3340727, 12.3433561, 12.3525765, 12.3617135, 12.3707477, 12.3796614, 12.3884376, 12.3970609, 12.4055168, 12.4137921, 12.4218746, 12.4297533, 12.4374182, 12.4448604, 12.4520721, 12.4590462, 12.4657768, 12.4722589, 12.4784883, 12.4844617, 12.4901765, 12.4956312, 12.5008247, 12.5057569, 12.5104281, 12.5148394, 12.5189926, 12.5228898, 12.526534, 12.5299285, 12.5330769, 12.5359836, 12.5386533, 12.5410908, 12.5433016, 12.5452914, 12.547066, 12.5486317, 12.549995, 12.5511623, 12.5521407, 12.5529369, 12.553558, 12.5540112, 12.5543037, 12.5544428, 12.5544358, 12.55429, 12.5540127, 12.5536111, 12.5530926, 12.5524643, 12.5517332, 12.5509063, 12.5499906, 12.5489928, 12.5479197, 12.5467775, 12.5455729, 12.5443119, 12.5430005, 12.5416448, 12.5402502, 12.5388224, 12.5373666, 12.535888, 12.5343915, 12.5328817, 12.5313633, 12.5298405, 12.5283175, 12.5267981, 12.5252861, 12.5237849, 12.5222978, 12.520828, 12.5193784, 12.5179516, 12.5165501, 12.5151763, 12.5138322, 12.51252, 12.5112412, 12.5099975, 12.5087904, 12.4912096, 12.4900025, 12.4887588, 12.48748, 12.4861678, 12.4848237, 12.4834499, 12.4820484, 12.4806216, 12.479172, 12.4777022, 12.4762151, 12.4747139, 12.4732019, 12.4716825, 12.4701595, 12.4686367, 12.4671183, 12.4656085, 12.464112, 12.4626334, 12.4611776, 12.4597498, 12.4583552, 12.4569995, 12.4556881, 12.4544271, 12.4532225, 12.4520803, 12.4510072, 12.4500094, 12.4490937, 12.4482668, 12.4475357, 12.4469074, 12.4463889, 12.4459873, 12.44571, 12.4455642, 12.4455572, 12.4456963, 12.4459888, 12.446442, 12.4470631, 12.4478593, 12.4488377, 12.450005, 12.4513683, 12.452934, 12.4547086, 12.4566984, 12.4589092, 12.4613467, 12.4640164, 12.4669231, 12.4700715, 12.473466, 12.4771102, 12.4810074, 12.4851606, 12.4895719, 12.4942431, 12.4991753, 12.5043688, 12.5098235, 12.5155383, 12.5215117, 12.5277411, 12.5342232, 12.5409538, 12.5479279, 12.5551396, 12.5625818, 12.5702467, 12.5781254, 12.5862079, 12.5944832, 12.6029391, 12.6115624, 12.6203386, 12.6292523, 12.6382865, 12.6474235, 12.6566439, 12.6659273, 12.6752521, 12.6845954, 12.6939331, 12.7032395, 12.7124882, 12.7216512, 12.7306993, 12.7396022, 12.7483282, 12.7568446, 12.7651174, 12.7731117, 12.7807912, 12.7881188, 12.7950562, 12.8015643, 12.807603, 12.8131314, 12.8181078, 12.8224898, 12.8262344, 12.829298, 12.8316366, 12.8332058, 12.833961, 12.8338573, 12.8328498, 12.8308939, 12.8279449, 12.8239586, 12.8188912, 12.8126995, 12.8053412, 12.7967746, 12.7869593, 12.7758563, 12.7634275, 12.7496369, 12.73445, 12.7178343, 12.6997593, 12.6801971, 12.659122, 12.6365114, 12.6123454, 12.5866073, 12.5592836, 12.5303647, 12.4998444, 12.4677208, 12.433996, 12.3986766, 12.3617739, 12.323304, 12.283288, 12.2417523, 12.1987288, 12.1542551, 12.1083747, 12.0611371, 12.0125981, 11.9628198, 11.9118711, 11.8598276, 11.8067717, 11.752793, 11.6979883, 11.6424616, 11.5863244, 11.5296956, 11.4727017, 11.415477, 11.3581632, 11.3009099, 11.2438743, 11.1872213, 11.1311234, 11.0757608, 11.021321, 10.967999, 10.9159969, 10.8655242, 10.8167969, 10.7700378, 10.7254763, 10.6833476, 10.6438929, 10.607359, 10.5739976, 10.5440651, 10.5178224, 10.4955338, 10.4774671, 10.4638928, 10.4550835, 10.4513133, 10.452857, 10.4599899, 10.4729863, 10.4921195, 10.5176604, 10.549877, 10.5890334, 10.6353891, 10.6891974, 10.7507053, 10.8201519, 10.8977675, 10.9837725, 11.0783763, 11.1817764, 11.2941566, 11.4156866, 11.54652, 11.6867939, 11.8366268, 11.9961179, 12.1653456, 12.3443662, 12.5332127, 12.7318932, 12.94039, 13.158658, 13.3866232, 13.624182, 13.8711992, 14.1275073, 14.3929049, 14.6671555, 14.9499864, 15.2410877, 15.5401105, 15.8466667, 16.1603272, 16.4806215, 16.8070365, 17.1390154, 17.4759574, 17.8172169, 18.1621024, 18.5098766, 18.8597556, 19.2109085, 19.5624576, 19.9134778, 20.2629969, 20.6099955, 20.9534076, 21.2921208, 21.6249769, 21.9507724, 22.2682598, 22.5761483, 22.8731052, 23.1577569, 23.428691, 23.6844578, 23.9235721, 24.1445153, 24.3457384, 24.5256636, 24.6826876, 24.8151845, 24.9215091, 25], 12777.777777777776];

    let solutionMax = [[0, 5352.5, 6834.24, 5810.3, 3696.59, 1556.69, -23.13, -873.94, -1099.37, -923.73, -576.8, -229.7, 24.34, 159.5, 193.66, 163.64, 106.73, 50.44, 9.61, -11.86, -17.01, -11.89, -2.56, 6.56, 13.13, 11.87, 18.44, 27.56, 36.89, 42.01, 36.86, 15.39, -25.44, -81.73, -138.64, -168.66, -134.5, 0.66, 254.7, 601.8, 948.73, 1124.37, 898.94, 48.13, -1531.69, -3671.59, -5785.3, -6809.24, -5327.5, 25], 14888.888888888947];

    // Minimums for Spring Parameter
    let minimum = SpringEasing([0, 25], {
      easing: [SpringInOutFrame, -5000, -5000, -5000, -5000],
      numPoints: 500,
      decimal: 7
    });
    expect(minimum)
      .toEqual(solutionMin);

    // Maximums for Spring Parameter
    let maximum = SpringEasing([0, 25], {
      easing: `spring-in-out(5000, 5000, 5000, 5000)`,
      numPoints: 50,
      decimal: 2
    });
    expect(maximum)
      .toEqual(solutionMax);
  })

  it('All frames function', () => {
    let easeIn = SpringEasing([0, 25], {
      easing: [SpringFrame, 1, 100, 10, 0],
      numPoints: 50,
      decimal: 2
    });

    expect(easeIn)
      .toEqual([
        [
          0, 1.35, 4.61, 8.91, 13.54, 17.94,
          21.76, 24.79, 26.97, 28.33, 28.97, 29.05,
          28.7, 28.1, 27.37, 26.62, 25.93, 25.35,
          24.9, 24.59, 24.41, 24.34, 24.35, 24.43,
          24.53, 24.65, 24.78, 24.88, 24.97, 25.04,
          25.08, 25.1, 25.11, 25.1, 25.09, 25.07,
          25.05, 25.03, 25.01, 25, 24.99, 24.99,
          24.98, 24.98, 24.98, 24.99, 24.99, 24.99,
          25, 25
        ],
        1666.6666666666663
      ]);

    let easeOut = SpringEasing([0, 25], {
      easing: [SpringOutFrame, 1, 100, 10, 0],
      numPoints: 50,
      decimal: 2
    });
    expect(easeOut)
      .toEqual([
        [
          0, 0, 0.01, 0.01, 0.01, 0.02,
          0.02, 0.02, 0.01, 0.01, -0, -0.01,
          -0.03, -0.05, -0.07, -0.09, -0.1, -0.11,
          -0.1, -0.08, -0.04, 0.03, 0.12, 0.22,
          0.35, 0.47, 0.57, 0.65, 0.66, 0.59,
          0.41, 0.1, -0.35, -0.93, -1.62, -2.37,
          -3.1, -3.7, -4.05, -3.97, -3.33, -1.97,
          0.21, 3.24, 7.06, 11.46, 16.09, 20.39,
          23.65, 25
        ],
        1666.6666666666663
      ]);

    let easeInOut = SpringEasing([0, 25], {
      easing: [SpringInOutFrame, 1, 100, 10, 0],
      numPoints: 50,
      decimal: 2
    });
    expect(easeInOut)
      .toEqual([
        [
          0, 2.31, 6.77, 10.88, 13.49, 14.49,
          14.35, 13.69, 12.96, 12.45, 12.2, 12.18,
          12.27, 12.39, 12.49, 12.54, 12.55, 12.54,
          12.52, 12.51, 12.5, 12.49, 12.49, 12.49,
          12.5, 12.5, 12.51, 12.51, 12.51, 12.5,
          12.49, 12.48, 12.46, 12.45, 12.46, 12.51,
          12.61, 12.73, 12.82, 12.8, 12.55, 12.04,
          11.31, 10.65, 10.51, 11.51, 14.12, 18.23,
          22.69, 25
        ],
        1666.6666666666663
      ]);

    let easeOutIn = SpringEasing([0, 25], {
      easing: [SpringOutInFrame, 1, 100, 10, 0],
      numPoints: 50,
      decimal: 2
    });
    expect(easeOutIn)
      .toEqual([
        [
          0, 0, 0.01, 0.01, 0.01, -0,
          -0.02, -0.03, -0.05, -0.05, -0.02, 0.06,
          0.17, 0.29, 0.33, 0.2, -0.17, -0.81,
          -1.55, -2.02, -1.67, 0.1, 3.53, 8.04,
          11.82, 13.18, 16.96, 21.47, 24.9, 26.67,
          27.02, 26.55, 25.81, 25.17, 24.8, 24.67,
          24.71, 24.83, 24.94, 25.02, 25.05, 25.05,
          25.03, 25.02, 25, 24.99, 24.99, 24.99,
          25, 25
        ],
        1666.6666666666663
      ]);
  })
  
  it('String interpolation & Custom interpolation functions', () => {
    // string interpolation
    let [keyframes] = SpringEasing(["0turn", 5, "50deg", "700", 0], {
      easing: "spring",
      numPoints: 100,
      decimal: 2
    });
    expect( keyframes.every(str => /turn$/.test(str as string)) ).toEqual(true)

    let [keyframes2] = SpringEasing(["red", "blue", "#4f4", "rgb(0, 0, 0)"], {
      // Enforce a linear easing frame function
      // Not really necessary but it show what you can do if you really need other kinds of easings 
      easing: [(t) => t],
      numPoints: 8,
      decimal: 2
    }, interpolateColor);
    expect(keyframes2)
      .toEqual(['rgba(255,0,0,1)',
    'rgba(146,0,109,1)',
      'rgba(36,0,219,1)',
      'rgba(19,73,202,1)',
      'rgba(49,182,121,1)',
      'rgba(58,219,58,1)',
      'rgba(29,109,29,1)',
      'rgba(0,0,0,1)'
      ]);
  })
})